-- Copyright 2021 Jeff Foley. All rights reserved.
-- Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

local json = require("json")

name = "PentestTools"
type = "api"

function start()
    set_rate_limit(1)
end

function check()
    local c
    local cfg = datasrc_config()
    if cfg ~= nil then
        c = cfg.credentials
    end

    if (c ~= nil and c.key ~= nil and c.key ~= "") then
        return true
    end
    return false
end

function vertical(ctx, domain)
    local c
    local cfg = datasrc_config()
    if cfg ~= nil then
        c = cfg.credentials
    end

    if (c == nil or c.key == nil or c.key == "") then
        return
    end

    local id, err = start_scan(ctx, domain, c.key)
    if (err ~= nil and err ~= "") then
        log(ctx, "start_scan request to service failed: " .. err)
        return
    end

    while(true) do
        local status, err = get_scan_status(ctx, id, c.key)
        if (err ~= nil and err ~= "") then
            log(ctx, "get_scan_status request to service failed: " .. err)
            return
        elseif (status ~= "waiting" and status ~= "running") then
            break
        end

        for _=1,5 do check_rate_limit() end
    end

    local output, err = get_output(ctx, id, c.key)
    if (err ~= nil and err ~= "") then
        log(ctx, "get_output request to service failed: " .. err)
        return
    end

    if (output ~= nil and output ~= "") then
        for _, obj in pairs(output) do
            new_name(ctx, obj.hostname)
            new_addr(ctx, obj.ip_address, obj.hostname)
        end
    end
end

function start_scan(ctx, domain, key)
    local body, err = json.encode({
        ['op']="start_scan",
        ['tool_id']=20,
        ['target']=domain,
        ['tool_params'] = {
            ['subdom_details']="on",
            ['web_details']="off",
        },
    })
    if (err ~= nil and err ~= "") then
        return nil, err
    end

    local resp, err = request(ctx, {
        ['url']=build_url(key),
        ['method']="POST",
        ['data']=body,
        ['headers']={['Content-Type']="application/json"}
    })
    if (err ~= nil and err ~= "") then
        return nil, err
    end

    j = json.decode(resp)
    if j.op_status ~= "success" then
        return nil, j.error
    end

    return j.scan_id, nil
end

function get_scan_status(ctx, id, key)
    local body = json.encode({
        ['op']="get_scan_status",
        ['scan_id']=id,
    })

    local resp, err = request(ctx, {
        ['url']=build_url(key),
        ['method']="POST",
        ['data']=body,
        ['headers']={['Content-Type']="application/json"}
    })
    if (err ~= nil and err ~= "") then
        return nil, err
    end

    j = json.decode(resp)
    if j.op_status ~= "success" then
        return nil, j.error
    end

    return j.scan_status, nil
end

function get_output(ctx, id, key)
    local body = json.encode({
        ['op']="get_output",
        ['scan_id']=id,
    })

    local resp, err = request(ctx, {
        ['url']=build_url(key),
        ['method']="POST",
        ['data']=body,
        ['headers']={['Content-Type']="application/json"}
    })
    if (err ~= nil and err ~= "") then
        return nil, err
    end

    j = json.decode(resp)
    if j.op_status ~= "success" then
        return nil, j.error
    end

    return j['scan_output']['scan_tests']
end

function build_url(key)
    return "https://pentest-tools.com/api?key=" .. key
end
